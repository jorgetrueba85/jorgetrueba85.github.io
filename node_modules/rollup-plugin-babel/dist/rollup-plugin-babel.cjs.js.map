{"version":3,"file":"rollup-plugin-babel.cjs.js","sources":["../src/constants.js","../src/utils.js","../src/preflightCheck.js","../src/helperPlugin.js","../src/index.js"],"sourcesContent":["export const INLINE = {};\nexport const RUNTIME = {};\nexport const EXTERNAL = {};\n\n// NOTE: DO NOT REMOVE the null character `\\0` as it may be used by other plugins\n// e.g. https://github.com/rollup/rollup-plugin-node-resolve/blob/313a3e32f432f9eb18cc4c231cc7aac6df317a51/src/index.js#L74\nexport const HELPERS = '\\0rollupPluginBabelHelpers.js';\n","export const addBabelPlugin = (options, plugin) => ({ ...options, plugins: options.plugins.concat(plugin) });\n\nlet warned = {};\nexport function warnOnce(ctx, msg) {\n\tif (warned[msg]) return;\n\twarned[msg] = true;\n\tctx.warn(msg);\n}\n\nconst regExpCharactersRegExp = /[\\\\^$.*+?()[\\]{}|]/g;\nexport const escapeRegExpCharacters = str => str.replace(regExpCharactersRegExp, '\\\\$&');\n","import { transformSync } from '@babel/core';\nimport { INLINE, RUNTIME, EXTERNAL } from './constants.js';\nimport { addBabelPlugin } from './utils.js';\n\nconst MODULE_ERROR =\n\t'Rollup requires that your Babel configuration keeps ES6 module syntax intact. ' +\n\t'Unfortunately it looks like your configuration specifies a module transformer ' +\n\t'to replace ES6 modules with another module format. To continue you have to disable it.' +\n\t'\\n\\n' +\n\t\"Most commonly it's a CommonJS transform added by @babel/preset-env - \" +\n\t'in such case you should disable it by adding `modules: false` option to that preset ' +\n\t'(described in more detail here - https://github.com/rollup/rollup-plugin-babel#modules ).';\n\nconst UNEXPECTED_ERROR =\n\t'An unexpected situation arose. Please raise an issue at ' +\n\t'https://github.com/rollup/rollup-plugin-babel/issues. Thanks!';\n\nfunction fallbackClassTransform() {\n\treturn {\n\t\tvisitor: {\n\t\t\tClassDeclaration(path, state) {\n\t\t\t\tpath.replaceWith(state.file.addHelper('inherits'));\n\t\t\t},\n\t\t},\n\t};\n}\n\nexport default function createPreflightCheck() {\n\tlet preflightCheckResults = {};\n\n\treturn (ctx, options) => {\n\t\tconst key = options.filename;\n\n\t\tif (preflightCheckResults[key] === undefined) {\n\t\t\tlet helpers;\n\n\t\t\tconst inputCode = 'class Foo extends Bar {};\\nexport default Foo;';\n\t\t\tconst transformed = transformSync(inputCode, options);\n\n\t\t\tlet che